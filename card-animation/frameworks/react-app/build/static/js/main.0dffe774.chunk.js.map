{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","placedIndex","placedCard","setInterval","setState","setTimeout","objectSpread","rank","suit","react_default","a","createElement","class","App_Hand","removePlaced","App_PlacedCardArea","React","Component","PlacedCardArea","card","props","Fragment","nothing","Hand","map","index","cssClass","concat","up","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dffe774.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      placedIndex: -1,\n      placedCard: null,\n    }\n    setInterval(() => {\n      this.setState({\n        placedCard: null,\n        placedIndex: this.state.placedIndex === 4\n          ? 0\n          : this.state.placedIndex + 1,\n      })\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          placedCard: {\n            rank: this.state.placedIndex + 1,\n            suit: 'rock',\n          }\n        })\n      }, 1000)\n    }, 1250)\n  }\n\n  render() {\n    return (\n      <section>\n        <h1>React</h1>\n        <main>\n          <h2>deleting placed cards from hand</h2>\n          <div class=\"table-top\">\n            <Hand placedIndex={this.state.placedIndex} placedCard={this.state.placedCard} removePlaced={true}/>\n            <PlacedCardArea placedCard={this.state.placedCard} />\n          </div>\n        </main>\n        <hr/>\n        <main>\n          <h2>duplicating placed cards in hand</h2>\n          <div class=\"table-top\">\n            <Hand placedIndex={this.state.placedIndex} placedCard={this.state.placedCard}/>\n            <PlacedCardArea placedCard={this.state.placedCard} />\n          </div>\n        </main>\n      </section>\n    )\n  }\n}\n\nclass PlacedCardArea extends Component {\n  render() {\n    let card = this.props.placedCard\n\n    if (card) {\n      return (\n        <>\n          <pilatch-card suit={card.suit} rank={card.rank} class=\"player-placed-card-area\"></pilatch-card>\n          <pilatch-card nothing class=\"player-placed-card-area\"></pilatch-card>\n        </>\n      )\n    } else {\n      return <pilatch-card nothing class=\"player-placed-card-area\"></pilatch-card>\n    }\n  }\n}\n\nclass Hand extends Component {\n  render() {\n    let placedIndex = this.props.placedIndex\n    let placedCard = this.props.placedCard\n    let removePlaced = this.props.removePlaced\n\n    if (placedIndex === -1) { // no placed card yet\n      return [0,1,2,3,4].map(index => {\n        let cssClass = `player-hand hand-size-5 card-${index}`\n        return <pilatch-card suit=\"rock\" rank={index + 1} up class={cssClass}></pilatch-card>\n      })\n    }\n\n    return (\n      [0,1,2,3,4].map(index => {\n        if (placedCard && index === placedIndex && removePlaced) {\n          return null\n        }\n\n        let adjustedHandIndex = placedIndex > index\n          ? index\n          : index - 1\n        let cssClass = `player-hand hand-size-5 card-${adjustedHandIndex} ${\n          placedIndex === index\n            ? 'player-placed-card-area'\n            : ''\n        }`\n        return <pilatch-card suit=\"rock\" rank={index + 1} up={index === placedIndex ? null : true} class={cssClass}></pilatch-card>\n      }).filter(Boolean)\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}